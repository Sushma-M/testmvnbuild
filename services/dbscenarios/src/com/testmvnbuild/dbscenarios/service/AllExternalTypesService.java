/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.AllExternalTypes;
import com.testmvnbuild.dbscenarios.AllExternalTypesId;

/**
 * Service object for domain model class {@link AllExternalTypes}.
 */
public interface AllExternalTypesService {

    /**
     * Creates a new AllExternalTypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AllExternalTypes if any.
     *
     * @param allExternalTypes Details of the AllExternalTypes to be created; value cannot be null.
     * @return The newly created AllExternalTypes.
     */
	AllExternalTypes create(AllExternalTypes allExternalTypes);


	/**
	 * Returns AllExternalTypes by given id if exists.
	 *
	 * @param allexternaltypesId The id of the AllExternalTypes to get; value cannot be null.
	 * @return AllExternalTypes associated with the given allexternaltypesId.
     * @throws EntityNotFoundException If no AllExternalTypes is found.
	 */
	AllExternalTypes getById(AllExternalTypesId allexternaltypesId) throws EntityNotFoundException;

    /**
	 * Find and return the AllExternalTypes by given id if exists, returns null otherwise.
	 *
	 * @param allexternaltypesId The id of the AllExternalTypes to get; value cannot be null.
	 * @return AllExternalTypes associated with the given allexternaltypesId.
	 */
	AllExternalTypes findById(AllExternalTypesId allexternaltypesId);


	/**
	 * Updates the details of an existing AllExternalTypes. It replaces all fields of the existing AllExternalTypes with the given allExternalTypes.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AllExternalTypes if any.
     *
	 * @param allExternalTypes The details of the AllExternalTypes to be updated; value cannot be null.
	 * @return The updated AllExternalTypes.
	 * @throws EntityNotFoundException if no AllExternalTypes is found with given input.
	 */
	AllExternalTypes update(AllExternalTypes allExternalTypes) throws EntityNotFoundException;

    /**
	 * Deletes an existing AllExternalTypes with the given id.
	 *
	 * @param allexternaltypesId The id of the AllExternalTypes to be deleted; value cannot be null.
	 * @return The deleted AllExternalTypes.
	 * @throws EntityNotFoundException if no AllExternalTypes found with the given id.
	 */
	AllExternalTypes delete(AllExternalTypesId allexternaltypesId) throws EntityNotFoundException;

	/**
	 * Find all AllExternalTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllExternalTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AllExternalTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AllExternalTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllExternalTypes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AllExternalTypes> findAll(String query, Pageable pageable);

    /**
	 * Exports all AllExternalTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AllExternalTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AllExternalTypes.
	 */
	long count(String query);


}

