/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.TOne2oneC;

/**
 * Service object for domain model class {@link TOne2oneC}.
 */
public interface TOne2oneCService {

    /**
     * Creates a new TOne2oneC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneC if any.
     *
     * @param tone2oneC Details of the TOne2oneC to be created; value cannot be null.
     * @return The newly created TOne2oneC.
     */
	TOne2oneC create(TOne2oneC tone2oneC);


	/**
	 * Returns TOne2oneC by given id if exists.
	 *
	 * @param tone2onecId The id of the TOne2oneC to get; value cannot be null.
	 * @return TOne2oneC associated with the given tone2onecId.
     * @throws EntityNotFoundException If no TOne2oneC is found.
	 */
	TOne2oneC getById(String tone2onecId) throws EntityNotFoundException;

    /**
	 * Find and return the TOne2oneC by given id if exists, returns null otherwise.
	 *
	 * @param tone2onecId The id of the TOne2oneC to get; value cannot be null.
	 * @return TOne2oneC associated with the given tone2onecId.
	 */
	TOne2oneC findById(String tone2onecId);


	/**
	 * Updates the details of an existing TOne2oneC. It replaces all fields of the existing TOne2oneC with the given tone2oneC.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneC if any.
     *
	 * @param tone2oneC The details of the TOne2oneC to be updated; value cannot be null.
	 * @return The updated TOne2oneC.
	 * @throws EntityNotFoundException if no TOne2oneC is found with given input.
	 */
	TOne2oneC update(TOne2oneC tone2oneC) throws EntityNotFoundException;

    /**
	 * Deletes an existing TOne2oneC with the given id.
	 *
	 * @param tone2onecId The id of the TOne2oneC to be deleted; value cannot be null.
	 * @return The deleted TOne2oneC.
	 * @throws EntityNotFoundException if no TOne2oneC found with the given id.
	 */
	TOne2oneC delete(String tone2onecId) throws EntityNotFoundException;

	/**
	 * Find all TOne2oneCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2oneCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TOne2oneCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2oneCs.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TOne2oneC> findAll(String query, Pageable pageable);

    /**
	 * Exports all TOne2oneCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TOne2oneCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TOne2oneC.
	 */
	long count(String query);


}

