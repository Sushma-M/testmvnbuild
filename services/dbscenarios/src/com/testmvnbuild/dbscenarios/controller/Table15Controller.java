/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testmvnbuild.dbscenarios.Table15;
import com.testmvnbuild.dbscenarios.Table15Id;
import com.testmvnbuild.dbscenarios.service.Table15Service;

/**
 * Controller object for domain model class Table15.
 * @see Table15
 */
@RestController("dbscenarios.Table15Controller")
@Api(value = "Table15Controller", description = "Exposes APIs to work with Table15 resource.")
@RequestMapping("/dbscenarios/Table15")
public class Table15Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table15Controller.class);

    @Autowired
    @Qualifier("dbscenarios.Table15Service")
    private Table15Service table15Service;

    @ApiOperation(value = "Creates a new Table15 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table15 createTable15(@RequestBody Table15 table15) {
        LOGGER.debug("Create Table15 with information: {}", table15);
        table15 = table15Service.create(table15);
        LOGGER.debug("Created Table15 with information: {}", table15);
        return table15;
    }

    @ApiOperation(value = "Returns the Table15 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table15 getTable15(@RequestParam("column2") String column2, @RequestParam("column3") String column3, @RequestParam("column4") String column4, @RequestParam("column5") String column5) throws EntityNotFoundException {
        Table15Id table15Id = new Table15Id();
        table15Id.setColumn2(column2);
        table15Id.setColumn3(column3);
        table15Id.setColumn4(column4);
        table15Id.setColumn5(column5);
        LOGGER.debug("Getting Table15 with id: {}", table15Id);
        Table15 table15 = table15Service.getById(table15Id);
        LOGGER.debug("Table15 details with id: {}", table15);
        return table15;
    }

    @ApiOperation(value = "Updates the Table15 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table15 editTable15(@RequestParam("column2") String column2, @RequestParam("column3") String column3, @RequestParam("column4") String column4, @RequestParam("column5") String column5, @RequestBody Table15 table15) throws EntityNotFoundException {
        table15.setColumn2(column2);
        table15.setColumn3(column3);
        table15.setColumn4(column4);
        table15.setColumn5(column5);
        LOGGER.debug("Table15 details with id is updated with: {}", table15);
        return table15Service.update(table15);
    }

    @ApiOperation(value = "Deletes the Table15 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable15(@RequestParam("column2") String column2, @RequestParam("column3") String column3, @RequestParam("column4") String column4, @RequestParam("column5") String column5) throws EntityNotFoundException {
        Table15Id table15Id = new Table15Id();
        table15Id.setColumn2(column2);
        table15Id.setColumn3(column3);
        table15Id.setColumn4(column4);
        table15Id.setColumn5(column5);
        LOGGER.debug("Deleting Table15 with id: {}", table15Id);
        Table15 table15 = table15Service.delete(table15Id);
        return table15 != null;
    }

    /**
     * @deprecated Use {@link #findTable15s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table15 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table15> searchTable15sByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table15s list");
        return table15Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Table15 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table15> findTable15s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table15s list");
        return table15Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable15s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table15Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Table15 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTable15s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table15s");
        return table15Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table15Service instance
	 */
    protected void setTable15Service(Table15Service service) {
        this.table15Service = service;
    }
}
