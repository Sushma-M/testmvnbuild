/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.TOne2oneP;

/**
 * Service object for domain model class {@link TOne2oneP}.
 */
public interface TOne2onePService {

    /**
     * Creates a new TOne2oneP. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneP if any.
     *
     * @param tone2oneP Details of the TOne2oneP to be created; value cannot be null.
     * @return The newly created TOne2oneP.
     */
	TOne2oneP create(TOne2oneP tone2oneP);


	/**
	 * Returns TOne2oneP by given id if exists.
	 *
	 * @param tone2onepId The id of the TOne2oneP to get; value cannot be null.
	 * @return TOne2oneP associated with the given tone2onepId.
     * @throws EntityNotFoundException If no TOne2oneP is found.
	 */
	TOne2oneP getById(Short tone2onepId) throws EntityNotFoundException;

    /**
	 * Find and return the TOne2oneP by given id if exists, returns null otherwise.
	 *
	 * @param tone2onepId The id of the TOne2oneP to get; value cannot be null.
	 * @return TOne2oneP associated with the given tone2onepId.
	 */
	TOne2oneP findById(Short tone2onepId);

    /**
	 * Find and return the TOne2oneP for given serialCol  if exists.
	 *
	 * @param serialCol value of serialCol; value cannot be null.
	 * @return TOne2oneP associated with the given inputs.
     * @throws EntityNotFoundException if no matching TOne2oneP found.
	 */
    TOne2oneP getBySerialCol(BigInteger serialCol)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing TOne2oneP. It replaces all fields of the existing TOne2oneP with the given tone2oneP.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneP if any.
     *
	 * @param tone2oneP The details of the TOne2oneP to be updated; value cannot be null.
	 * @return The updated TOne2oneP.
	 * @throws EntityNotFoundException if no TOne2oneP is found with given input.
	 */
	TOne2oneP update(TOne2oneP tone2oneP) throws EntityNotFoundException;

    /**
	 * Deletes an existing TOne2oneP with the given id.
	 *
	 * @param tone2onepId The id of the TOne2oneP to be deleted; value cannot be null.
	 * @return The deleted TOne2oneP.
	 * @throws EntityNotFoundException if no TOne2oneP found with the given id.
	 */
	TOne2oneP delete(Short tone2onepId) throws EntityNotFoundException;

	/**
	 * Find all TOne2onePs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2onePs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TOne2onePs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2onePs.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TOne2oneP> findAll(String query, Pageable pageable);

    /**
	 * Exports all TOne2onePs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TOne2onePs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TOne2oneP.
	 */
	long count(String query);


}

