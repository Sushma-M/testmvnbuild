/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.TUcComposites2;
import com.testmvnbuild.dbscenarios.TUcComposites2Id;


/**
 * ServiceImpl object for domain model class TUcComposites2.
 *
 * @see TUcComposites2
 */
@Service("dbscenarios.TUcComposites2Service")
public class TUcComposites2ServiceImpl implements TUcComposites2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposites2ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TUcComposites2Dao")
    private WMGenericDao<TUcComposites2, TUcComposites2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcComposites2, TUcComposites2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TUcComposites2 create(TUcComposites2 tucComposites2) {
        LOGGER.debug("Creating a new TUcComposites2 with information: {}", tucComposites2);
        TUcComposites2 tucComposites2Created = this.wmGenericDao.create(tucComposites2);
        return tucComposites2Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TUcComposites2 getById(TUcComposites2Id tuccomposites2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding TUcComposites2 by id: {}", tuccomposites2Id);
        TUcComposites2 tucComposites2 = this.wmGenericDao.findById(tuccomposites2Id);
        if (tucComposites2 == null){
            LOGGER.debug("No TUcComposites2 found with id: {}", tuccomposites2Id);
            throw new EntityNotFoundException(String.valueOf(tuccomposites2Id));
        }
        return tucComposites2;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TUcComposites2 findById(TUcComposites2Id tuccomposites2Id) {
        LOGGER.debug("Finding TUcComposites2 by id: {}", tuccomposites2Id);
        return this.wmGenericDao.findById(tuccomposites2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TUcComposites2 update(TUcComposites2 tucComposites2) throws EntityNotFoundException {
        LOGGER.debug("Updating TUcComposites2 with information: {}", tucComposites2);
        this.wmGenericDao.update(tucComposites2);

        TUcComposites2Id tuccomposites2Id = new TUcComposites2Id();
        tuccomposites2Id.setByteId(tucComposites2.getByteId());
        tuccomposites2Id.setCharCol(tucComposites2.getCharCol());
        tuccomposites2Id.setStringCol(tucComposites2.getStringCol());
        tuccomposites2Id.setColumn5(tucComposites2.getColumn5());

        return this.wmGenericDao.findById(tuccomposites2Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TUcComposites2 delete(TUcComposites2Id tuccomposites2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TUcComposites2 with id: {}", tuccomposites2Id);
        TUcComposites2 deleted = this.wmGenericDao.findById(tuccomposites2Id);
        if (deleted == null) {
            LOGGER.debug("No TUcComposites2 found with id: {}", tuccomposites2Id);
            throw new EntityNotFoundException(String.valueOf(tuccomposites2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TUcComposites2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposites2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcComposites2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposites2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcComposites2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

