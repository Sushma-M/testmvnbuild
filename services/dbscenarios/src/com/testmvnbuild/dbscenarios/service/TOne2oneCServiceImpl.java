/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.TOne2oneC;


/**
 * ServiceImpl object for domain model class TOne2oneC.
 *
 * @see TOne2oneC
 */
@Service("dbscenarios.TOne2oneCService")
public class TOne2oneCServiceImpl implements TOne2oneCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TOne2oneCServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TOne2oneCDao")
    private WMGenericDao<TOne2oneC, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TOne2oneC, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TOne2oneC create(TOne2oneC tone2oneC) {
        LOGGER.debug("Creating a new TOne2oneC with information: {}", tone2oneC);
        TOne2oneC tone2oneCCreated = this.wmGenericDao.create(tone2oneC);
        return tone2oneCCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneC getById(String tone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Finding TOne2oneC by id: {}", tone2onecId);
        TOne2oneC tone2oneC = this.wmGenericDao.findById(tone2onecId);
        if (tone2oneC == null){
            LOGGER.debug("No TOne2oneC found with id: {}", tone2onecId);
            throw new EntityNotFoundException(String.valueOf(tone2onecId));
        }
        return tone2oneC;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneC findById(String tone2onecId) {
        LOGGER.debug("Finding TOne2oneC by id: {}", tone2onecId);
        return this.wmGenericDao.findById(tone2onecId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneC update(TOne2oneC tone2oneC) throws EntityNotFoundException {
        LOGGER.debug("Updating TOne2oneC with information: {}", tone2oneC);
        this.wmGenericDao.update(tone2oneC);

        String tone2onecId = tone2oneC.getStringCol();

        return this.wmGenericDao.findById(tone2onecId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneC delete(String tone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TOne2oneC with id: {}", tone2onecId);
        TOne2oneC deleted = this.wmGenericDao.findById(tone2onecId);
        if (deleted == null) {
            LOGGER.debug("No TOne2oneC found with id: {}", tone2onecId);
            throw new EntityNotFoundException(String.valueOf(tone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TOne2oneC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TOne2oneC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

