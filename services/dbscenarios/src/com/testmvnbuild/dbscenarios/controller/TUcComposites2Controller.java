/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testmvnbuild.dbscenarios.TUcComposites2;
import com.testmvnbuild.dbscenarios.TUcComposites2Id;
import com.testmvnbuild.dbscenarios.service.TUcComposites2Service;

/**
 * Controller object for domain model class TUcComposites2.
 * @see TUcComposites2
 */
@RestController("dbscenarios.TUcComposites2Controller")
@Api(value = "TUcComposites2Controller", description = "Exposes APIs to work with TUcComposites2 resource.")
@RequestMapping("/dbscenarios/TUcComposites2")
public class TUcComposites2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposites2Controller.class);

    @Autowired
    @Qualifier("dbscenarios.TUcComposites2Service")
    private TUcComposites2Service tUcComposites2Service;

    @ApiOperation(value = "Creates a new TUcComposites2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites2 createTUcComposites2(@RequestBody TUcComposites2 tucComposites2) {
        LOGGER.debug("Create TUcComposites2 with information: {}", tucComposites2);
        tucComposites2 = tUcComposites2Service.create(tucComposites2);
        LOGGER.debug("Created TUcComposites2 with information: {}", tucComposites2);
        return tucComposites2;
    }

    @ApiOperation(value = "Returns the TUcComposites2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites2 getTUcComposites2(@RequestParam("byteId") Short byteId, @RequestParam("charCol") Character charCol, @RequestParam("stringCol") String stringCol, @RequestParam("column5") String column5) throws EntityNotFoundException {
        TUcComposites2Id tuccomposites2Id = new TUcComposites2Id();
        tuccomposites2Id.setByteId(byteId);
        tuccomposites2Id.setCharCol(charCol);
        tuccomposites2Id.setStringCol(stringCol);
        tuccomposites2Id.setColumn5(column5);
        LOGGER.debug("Getting TUcComposites2 with id: {}", tuccomposites2Id);
        TUcComposites2 tucComposites2 = tUcComposites2Service.getById(tuccomposites2Id);
        LOGGER.debug("TUcComposites2 details with id: {}", tucComposites2);
        return tucComposites2;
    }

    @ApiOperation(value = "Updates the TUcComposites2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites2 editTUcComposites2(@RequestParam("byteId") Short byteId, @RequestParam("charCol") Character charCol, @RequestParam("stringCol") String stringCol, @RequestParam("column5") String column5, @RequestBody TUcComposites2 tucComposites2) throws EntityNotFoundException {
        tucComposites2.setByteId(byteId);
        tucComposites2.setCharCol(charCol);
        tucComposites2.setStringCol(stringCol);
        tucComposites2.setColumn5(column5);
        LOGGER.debug("TUcComposites2 details with id is updated with: {}", tucComposites2);
        return tUcComposites2Service.update(tucComposites2);
    }

    @ApiOperation(value = "Deletes the TUcComposites2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcComposites2(@RequestParam("byteId") Short byteId, @RequestParam("charCol") Character charCol, @RequestParam("stringCol") String stringCol, @RequestParam("column5") String column5) throws EntityNotFoundException {
        TUcComposites2Id tuccomposites2Id = new TUcComposites2Id();
        tuccomposites2Id.setByteId(byteId);
        tuccomposites2Id.setCharCol(charCol);
        tuccomposites2Id.setStringCol(stringCol);
        tuccomposites2Id.setColumn5(column5);
        LOGGER.debug("Deleting TUcComposites2 with id: {}", tuccomposites2Id);
        TUcComposites2 tucComposites2 = tUcComposites2Service.delete(tuccomposites2Id);
        return tucComposites2 != null;
    }

    /**
     * @deprecated Use {@link #findTUcComposites2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcComposites2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposites2> searchTUcComposites2sByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcComposites2s list");
        return tUcComposites2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of TUcComposites2 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposites2> findTUcComposites2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposites2s list");
        return tUcComposites2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcComposites2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return tUcComposites2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of TUcComposites2 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTUcComposites2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TUcComposites2s");
        return tUcComposites2Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcComposites2Service instance
	 */
    protected void setTUcComposites2Service(TUcComposites2Service service) {
        this.tUcComposites2Service = service;
    }
}
