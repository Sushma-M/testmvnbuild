/*Copyright (c) 2016-2017 vcstest2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcstest2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcstest2.com*/
package com.testmvnbuild.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testmvnbuild.dbscenarios.TUcComposites1;

/**
 * Service object for domain model class {@link TUcComposites1}.
 */
public interface TUcComposites1Service {

    /**
     * Creates a new TUcComposites1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TUcComposites1 if any.
     *
     * @param tucComposites1 Details of the TUcComposites1 to be created; value cannot be null.
     * @return The newly created TUcComposites1.
     */
	TUcComposites1 create(TUcComposites1 tucComposites1);


	/**
	 * Returns TUcComposites1 by given id if exists.
	 *
	 * @param tuccomposites1Id The id of the TUcComposites1 to get; value cannot be null.
	 * @return TUcComposites1 associated with the given tuccomposites1Id.
     * @throws EntityNotFoundException If no TUcComposites1 is found.
	 */
	TUcComposites1 getById(Integer tuccomposites1Id) throws EntityNotFoundException;

    /**
	 * Find and return the TUcComposites1 by given id if exists, returns null otherwise.
	 *
	 * @param tuccomposites1Id The id of the TUcComposites1 to get; value cannot be null.
	 * @return TUcComposites1 associated with the given tuccomposites1Id.
	 */
	TUcComposites1 findById(Integer tuccomposites1Id);

    /**
	 * Find and return the TUcComposites1 for given byteCol  andcharCol  andshortCol  andstringCol  if exists.
	 *
	 * @param byteCol value of byteCol; value cannot be null.
	 * @param charCol value of charCol; value cannot be null.
	 * @param shortCol value of shortCol; value cannot be null.
	 * @param stringCol value of stringCol; value cannot be null.
	 * @return TUcComposites1 associated with the given inputs.
     * @throws EntityNotFoundException if no matching TUcComposites1 found.
	 */
    TUcComposites1 getByByteColAndCharColAndShortColAndStringCol(Short byteCol, Character charCol, Short shortCol, String stringCol)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing TUcComposites1. It replaces all fields of the existing TUcComposites1 with the given tucComposites1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TUcComposites1 if any.
     *
	 * @param tucComposites1 The details of the TUcComposites1 to be updated; value cannot be null.
	 * @return The updated TUcComposites1.
	 * @throws EntityNotFoundException if no TUcComposites1 is found with given input.
	 */
	TUcComposites1 update(TUcComposites1 tucComposites1) throws EntityNotFoundException;

    /**
	 * Deletes an existing TUcComposites1 with the given id.
	 *
	 * @param tuccomposites1Id The id of the TUcComposites1 to be deleted; value cannot be null.
	 * @return The deleted TUcComposites1.
	 * @throws EntityNotFoundException if no TUcComposites1 found with the given id.
	 */
	TUcComposites1 delete(Integer tuccomposites1Id) throws EntityNotFoundException;

	/**
	 * Find all TUcComposites1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcComposites1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TUcComposites1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TUcComposites1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcComposites1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TUcComposites1> findAll(String query, Pageable pageable);

    /**
	 * Exports all TUcComposites1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TUcComposites1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TUcComposites1.
	 */
	long count(String query);


}

